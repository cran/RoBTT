// Generated by rstantools.  Do not edit by hand.

/*
    RoBTT is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    RoBTT is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with RoBTT.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#ifndef USE_STANC3
#define USE_STANC3
#endif
#include <rstan/rstaninc.hpp>
// Code generated by stanc v2.32.2
#include <stan/model/model_header.hpp>
namespace model_lognormal_namespace {
using stan::model::model_base_crtp;
using namespace stan::math;
stan::math::profile_map profiles__;
static constexpr std::array<const char*, 231> locations_array__ =
  {" (found before start of program)",
  " (in 'string', line 222, column 2 to column 21)",
  " (in 'string', line 223, column 2 to column 25)",
  " (in 'string', line 224, column 2 to column 111)",
  " (in 'string', line 225, column 2 to column 109)",
  " (in 'string', line 228, column 2 to column 20)",
  " (in 'string', line 229, column 2 to column 17)",
  " (in 'string', line 230, column 2 to column 20)",
  " (in 'string', line 231, column 2 to column 21)",
  " (in 'string', line 232, column 2 to column 24)",
  " (in 'string', line 239, column 4 to column 66)",
  " (in 'string', line 240, column 4 to column 66)",
  " (in 'string', line 241, column 4 to column 62)",
  " (in 'string', line 238, column 7 to line 242, column 3)",
  " (in 'string', line 235, column 4 to column 62)",
  " (in 'string', line 236, column 4 to column 62)",
  " (in 'string', line 237, column 4 to column 62)",
  " (in 'string', line 234, column 15 to line 238, column 3)",
  " (in 'string', line 234, column 2 to line 242, column 3)",
  " (in 'string', line 247, column 4 to column 51)",
  " (in 'string', line 248, column 4 to column 51)",
  " (in 'string', line 246, column 7 to line 249, column 3)",
  " (in 'string', line 244, column 4 to column 49)",
  " (in 'string', line 245, column 4 to column 49)",
  " (in 'string', line 243, column 15 to line 246, column 3)",
  " (in 'string', line 243, column 2 to line 249, column 3)",
  " (in 'string', line 251, column 4 to column 104)",
  " (in 'string', line 252, column 4 to column 95)",
  " (in 'string', line 250, column 15 to line 253, column 3)",
  " (in 'string', line 250, column 2 to line 253, column 3)",
  " (in 'string', line 257, column 2 to column 33)",
  " (in 'string', line 258, column 2 to column 40)",
  " (in 'string', line 261, column 4 to column 93)",
  " (in 'string', line 260, column 15 to line 262, column 3)",
  " (in 'string', line 260, column 2 to line 262, column 3)",
  " (in 'string', line 264, column 4 to column 91)",
  " (in 'string', line 263, column 15 to line 265, column 3)",
  " (in 'string', line 263, column 2 to line 265, column 3)",
  " (in 'string', line 271, column 4 to column 90)",
  " (in 'string', line 270, column 7 to line 272, column 3)",
  " (in 'string', line 268, column 4 to column 63)",
  " (in 'string', line 269, column 4 to column 63)",
  " (in 'string', line 267, column 16 to line 270, column 3)",
  " (in 'string', line 267, column 2 to line 272, column 3)",
  " (in 'string', line 195, column 2 to column 12)",
  " (in 'string', line 197, column 2 to column 18)",
  " (in 'string', line 198, column 2 to column 18)",
  " (in 'string', line 200, column 9 to column 28)",
  " (in 'string', line 200, column 2 to column 33)",
  " (in 'string', line 201, column 9 to column 28)",
  " (in 'string', line 201, column 2 to column 33)",
  " (in 'string', line 203, column 9 to column 27)",
  " (in 'string', line 203, column 2 to column 36)",
  " (in 'string', line 204, column 9 to column 27)",
  " (in 'string', line 204, column 2 to column 34)",
  " (in 'string', line 206, column 2 to column 11)",
  " (in 'string', line 207, column 2 to column 11)",
  " (in 'string', line 209, column 9 to column 26)",
  " (in 'string', line 209, column 2 to column 37)",
  " (in 'string', line 210, column 9 to column 26)",
  " (in 'string', line 210, column 2 to column 37)",
  " (in 'string', line 211, column 8 to column 25)",
  " (in 'string', line 211, column 2 to column 45)",
  " (in 'string', line 212, column 8 to column 25)",
  " (in 'string', line 212, column 2 to column 45)",
  " (in 'string', line 214, column 9 to column 26)",
  " (in 'string', line 214, column 2 to column 36)",
  " (in 'string', line 215, column 9 to column 26)",
  " (in 'string', line 215, column 2 to column 36)",
  " (in 'string', line 216, column 9 to column 26)",
  " (in 'string', line 216, column 2 to column 47)",
  " (in 'string', line 217, column 9 to column 26)",
  " (in 'string', line 217, column 2 to column 47)",
  " (in 'string', line 218, column 2 to column 19)",
  " (in 'string', line 219, column 2 to column 19)",
  " (in 'string', line 224, column 8 to column 12)",
  " (in 'string', line 225, column 8 to column 12)",
  " (in 'string', line 6, column 4 to column 13)",
  " (in 'string', line 5, column 32 to line 7, column 3)",
  " (in 'string', line 9, column 4 to column 25)",
  " (in 'string', line 8, column 39 to line 10, column 3)",
  " (in 'string', line 14, column 4 to column 75)",
  " (in 'string', line 13, column 61 to line 15, column 3)",
  " (in 'string', line 19, column 4 to column 13)",
  " (in 'string', line 20, column 4 to column 15)",
  " (in 'string', line 21, column 4 to column 12)",
  " (in 'string', line 25, column 6 to column 24)",
  " (in 'string', line 26, column 6 to column 26)",
  " (in 'string', line 24, column 11 to line 27, column 5)",
  " (in 'string', line 23, column 6 to column 33)",
  " (in 'string', line 22, column 36 to line 24, column 5)",
  " (in 'string', line 22, column 4 to line 27, column 5)",
  " (in 'string', line 31, column 6 to column 17)",
  " (in 'string', line 29, column 6 to column 31)",
  " (in 'string', line 28, column 4 to line 31, column 17)",
  " (in 'string', line 32, column 4 to column 14)",
  " (in 'string', line 18, column 54 to line 33, column 3)",
  " (in 'string', line 35, column 4 to column 13)",
  " (in 'string', line 36, column 4 to column 15)",
  " (in 'string', line 37, column 4 to column 12)",
  " (in 'string', line 41, column 6 to column 24)",
  " (in 'string', line 42, column 6 to column 26)",
  " (in 'string', line 40, column 11 to line 43, column 5)",
  " (in 'string', line 39, column 6 to column 33)",
  " (in 'string', line 38, column 36 to line 40, column 5)",
  " (in 'string', line 38, column 4 to line 43, column 5)",
  " (in 'string', line 47, column 6 to column 17)",
  " (in 'string', line 45, column 6 to column 31)",
  " (in 'string', line 44, column 4 to line 47, column 17)",
  " (in 'string', line 48, column 4 to column 14)",
  " (in 'string', line 34, column 54 to line 49, column 3)",
  " (in 'string', line 54, column 4 to column 12)",
  " (in 'string', line 58, column 6 to column 23)",
  " (in 'string', line 56, column 6 to column 31)",
  " (in 'string', line 55, column 4 to line 58, column 23)",
  " (in 'string', line 59, column 4 to column 14)",
  " (in 'string', line 53, column 46 to line 60, column 3)",
  " (in 'string', line 62, column 4 to column 12)",
  " (in 'string', line 66, column 6 to column 23)",
  " (in 'string', line 64, column 6 to column 31)",
  " (in 'string', line 63, column 4 to line 66, column 23)",
  " (in 'string', line 67, column 4 to column 14)",
  " (in 'string', line 61, column 46 to line 68, column 3)",
  " (in 'string', line 83, column 4 to column 12)",
  " (in 'string', line 186, column 6 to column 42)",
  " (in 'string', line 185, column 30 to line 187, column 5)",
  " (in 'string', line 185, column 10 to line 187, column 5)",
  " (in 'string', line 184, column 6 to column 39)",
  " (in 'string', line 183, column 30 to line 185, column 5)",
  " (in 'string', line 183, column 10 to line 187, column 5)",
  " (in 'string', line 172, column 6 to column 61)",
  " (in 'string', line 181, column 8 to column 65)",
  " (in 'string', line 180, column 35 to line 182, column 7)",
  " (in 'string', line 180, column 12 to line 182, column 7)",
  " (in 'string', line 179, column 8 to column 65)",
  " (in 'string', line 178, column 35 to line 180, column 7)",
  " (in 'string', line 178, column 12 to line 182, column 7)",
  " (in 'string', line 174, column 8 to line 177, column 10)",
  " (in 'string', line 173, column 52 to line 178, column 7)",
  " (in 'string', line 173, column 6 to line 182, column 7)",
  " (in 'string', line 171, column 29 to line 183, column 5)",
  " (in 'string', line 171, column 10 to line 187, column 5)",
  " (in 'string', line 160, column 6 to column 75)",
  " (in 'string', line 169, column 8 to column 79)",
  " (in 'string', line 168, column 35 to line 170, column 7)",
  " (in 'string', line 168, column 12 to line 170, column 7)",
  " (in 'string', line 167, column 8 to column 79)",
  " (in 'string', line 166, column 35 to line 168, column 7)",
  " (in 'string', line 166, column 12 to line 170, column 7)",
  " (in 'string', line 162, column 8 to line 165, column 10)",
  " (in 'string', line 161, column 52 to line 166, column 7)",
  " (in 'string', line 161, column 6 to line 170, column 7)",
  " (in 'string', line 159, column 29 to line 171, column 5)",
  " (in 'string', line 159, column 10 to line 187, column 5)",
  " (in 'string', line 158, column 6 to column 78)",
  " (in 'string', line 157, column 29 to line 159, column 5)",
  " (in 'string', line 157, column 10 to line 187, column 5)",
  " (in 'string', line 146, column 6 to column 80)",
  " (in 'string', line 155, column 8 to column 84)",
  " (in 'string', line 154, column 35 to line 156, column 7)",
  " (in 'string', line 154, column 12 to line 156, column 7)",
  " (in 'string', line 153, column 8 to column 84)",
  " (in 'string', line 152, column 35 to line 154, column 7)",
  " (in 'string', line 152, column 12 to line 156, column 7)",
  " (in 'string', line 148, column 8 to line 151, column 10)",
  " (in 'string', line 147, column 52 to line 152, column 7)",
  " (in 'string', line 147, column 6 to line 156, column 7)",
  " (in 'string', line 145, column 29 to line 157, column 5)",
  " (in 'string', line 145, column 10 to line 187, column 5)",
  " (in 'string', line 134, column 6 to column 76)",
  " (in 'string', line 143, column 8 to column 80)",
  " (in 'string', line 142, column 35 to line 144, column 7)",
  " (in 'string', line 142, column 12 to line 144, column 7)",
  " (in 'string', line 141, column 8 to column 80)",
  " (in 'string', line 140, column 35 to line 142, column 7)",
  " (in 'string', line 140, column 12 to line 144, column 7)",
  " (in 'string', line 136, column 8 to line 139, column 10)",
  " (in 'string', line 135, column 52 to line 140, column 7)",
  " (in 'string', line 135, column 6 to line 144, column 7)",
  " (in 'string', line 133, column 29 to line 145, column 5)",
  " (in 'string', line 133, column 10 to line 187, column 5)",
  " (in 'string', line 122, column 6 to column 101)",
  " (in 'string', line 131, column 8 to column 105)",
  " (in 'string', line 130, column 35 to line 132, column 7)",
  " (in 'string', line 130, column 12 to line 132, column 7)",
  " (in 'string', line 129, column 8 to column 105)",
  " (in 'string', line 128, column 35 to line 130, column 7)",
  " (in 'string', line 128, column 12 to line 132, column 7)",
  " (in 'string', line 124, column 8 to line 127, column 10)",
  " (in 'string', line 123, column 52 to line 128, column 7)",
  " (in 'string', line 123, column 6 to line 132, column 7)",
  " (in 'string', line 121, column 29 to line 133, column 5)",
  " (in 'string', line 121, column 10 to line 187, column 5)",
  " (in 'string', line 110, column 6 to column 77)",
  " (in 'string', line 119, column 8 to column 81)",
  " (in 'string', line 118, column 35 to line 120, column 7)",
  " (in 'string', line 118, column 12 to line 120, column 7)",
  " (in 'string', line 117, column 8 to column 81)",
  " (in 'string', line 116, column 35 to line 118, column 7)",
  " (in 'string', line 116, column 12 to line 120, column 7)",
  " (in 'string', line 112, column 8 to line 115, column 10)",
  " (in 'string', line 111, column 52 to line 116, column 7)",
  " (in 'string', line 111, column 6 to line 120, column 7)",
  " (in 'string', line 109, column 29 to line 121, column 5)",
  " (in 'string', line 109, column 10 to line 187, column 5)",
  " (in 'string', line 98, column 6 to column 80)",
  " (in 'string', line 107, column 8 to column 84)",
  " (in 'string', line 106, column 35 to line 108, column 7)",
  " (in 'string', line 106, column 12 to line 108, column 7)",
  " (in 'string', line 105, column 8 to column 84)",
  " (in 'string', line 104, column 35 to line 106, column 7)",
  " (in 'string', line 104, column 12 to line 108, column 7)",
  " (in 'string', line 100, column 8 to line 103, column 10)",
  " (in 'string', line 99, column 52 to line 104, column 7)",
  " (in 'string', line 99, column 6 to line 108, column 7)",
  " (in 'string', line 97, column 29 to line 109, column 5)",
  " (in 'string', line 97, column 10 to line 187, column 5)",
  " (in 'string', line 86, column 6 to column 77)",
  " (in 'string', line 95, column 8 to column 81)",
  " (in 'string', line 94, column 35 to line 96, column 7)",
  " (in 'string', line 94, column 12 to line 96, column 7)",
  " (in 'string', line 93, column 8 to column 81)",
  " (in 'string', line 92, column 35 to line 94, column 7)",
  " (in 'string', line 92, column 12 to line 96, column 7)",
  " (in 'string', line 88, column 8 to line 91, column 10)",
  " (in 'string', line 87, column 52 to line 92, column 7)",
  " (in 'string', line 87, column 6 to line 96, column 7)",
  " (in 'string', line 85, column 23 to line 97, column 5)",
  " (in 'string', line 85, column 4 to line 187, column 5)",
  " (in 'string', line 189, column 4 to column 14)",
  " (in 'string', line 82, column 113 to line 190, column 3)"};
template <bool propto__, typename T0__,
          stan::require_all_t<stan::is_stan_scalar<T0__>>* = nullptr>
stan::promote_args_t<T0__>
Jeffreys_mu_lpdf(const T0__& mu, std::ostream* pstream__);
template <bool propto__, typename T0__,
          stan::require_all_t<stan::is_stan_scalar<T0__>>* = nullptr>
stan::promote_args_t<T0__>
Jeffreys_sigma_lpdf(const T0__& sigma2, std::ostream* pstream__);
template <typename T0__, typename T1__, typename T2__, typename T3__,
          stan::require_all_t<stan::is_stan_scalar<T0__>,
                              stan::is_stan_scalar<T1__>,
                              stan::is_stan_scalar<T2__>,
                              stan::is_stan_scalar<T3__>>* = nullptr>
stan::promote_args_t<T0__, T1__, T2__, T3__>
pool_sigma(const T0__& sigma1, const T1__& sigma2, const T2__& N1,
           const T3__& N2, std::ostream* pstream__);
template <typename T1__,
          stan::require_all_t<stan::is_col_vector<T1__>,
                              stan::is_vt_not_complex<T1__>>* = nullptr>
stan::promote_args_t<stan::base_type_t<T1__>>
coefs_lb(const std::vector<int>& type_in, const T1__& bound_in_arg__,
         std::ostream* pstream__);
template <typename T1__,
          stan::require_all_t<stan::is_col_vector<T1__>,
                              stan::is_vt_not_complex<T1__>>* = nullptr>
stan::promote_args_t<stan::base_type_t<T1__>>
coefs_ub(const std::vector<int>& type_in, const T1__& bound_in_arg__,
         std::ostream* pstream__);
template <typename T1__,
          stan::require_all_t<stan::is_col_vector<T1__>,
                              stan::is_vt_not_complex<T1__>>* = nullptr>
stan::promote_args_t<stan::base_type_t<T1__>>
data_lb(const int& is_trunc, const T1__& trunc_in_arg__, std::ostream*
        pstream__);
template <typename T1__,
          stan::require_all_t<stan::is_col_vector<T1__>,
                              stan::is_vt_not_complex<T1__>>* = nullptr>
stan::promote_args_t<stan::base_type_t<T1__>>
data_ub(const int& is_trunc, const T1__& trunc_in_arg__, std::ostream*
        pstream__);
template <typename T0__, typename T2__, typename T4__,
          stan::require_all_t<stan::is_stan_scalar<T0__>,
                              stan::is_col_vector<T2__>,
                              stan::is_vt_not_complex<T2__>,
                              stan::is_col_vector<T4__>,
                              stan::is_vt_not_complex<T4__>>* = nullptr>
stan::promote_args_t<T0__, stan::base_type_t<T2__>, stan::base_type_t<T4__>>
set_prior(const T0__& parameter, const int& prior_type, const T2__&
          prior_parameters_arg__, const std::vector<int>& bounds_type,
          const T4__& bounds_arg__, std::ostream* pstream__);
template <bool propto__, typename T0__,
          stan::require_all_t<stan::is_stan_scalar<T0__>>*>
stan::promote_args_t<T0__>
Jeffreys_mu_lpdf(const T0__& mu, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__>;
  int current_statement__ = 0;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    current_statement__ = 77;
    return 0;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
template <bool propto__, typename T0__,
          stan::require_all_t<stan::is_stan_scalar<T0__>>*>
stan::promote_args_t<T0__>
Jeffreys_sigma_lpdf(const T0__& sigma2, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__>;
  int current_statement__ = 0;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    current_statement__ = 79;
    return stan::math::log((1 / sigma2));
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
template <typename T0__, typename T1__, typename T2__, typename T3__,
          stan::require_all_t<stan::is_stan_scalar<T0__>,
                              stan::is_stan_scalar<T1__>,
                              stan::is_stan_scalar<T2__>,
                              stan::is_stan_scalar<T3__>>*>
stan::promote_args_t<T0__, T1__, T2__, T3__>
pool_sigma(const T0__& sigma1, const T1__& sigma2, const T2__& N1,
           const T3__& N2, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__, T2__, T3__>;
  int current_statement__ = 0;
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    current_statement__ = 81;
    return stan::math::sqrt((((stan::math::pow(sigma1, 2) * N1) +
             (stan::math::pow(sigma2, 2) * N2)) / (N1 + N2)));
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
template <typename T1__,
          stan::require_all_t<stan::is_col_vector<T1__>,
                              stan::is_vt_not_complex<T1__>>*>
stan::promote_args_t<stan::base_type_t<T1__>>
coefs_lb(const std::vector<int>& type_in, const T1__& bound_in_arg__,
         std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::base_type_t<T1__>>;
  int current_statement__ = 0;
  const auto& bound_in = stan::math::to_ref(bound_in_arg__);
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    int type = std::numeric_limits<int>::min();
    local_scalar_t__ bound = DUMMY_VAR__;
    local_scalar_t__ lb = DUMMY_VAR__;
    current_statement__ = 91;
    if (stan::math::logical_eq(stan::math::num_elements(type_in), 0)) {
      current_statement__ = 89;
      return stan::math::negative_infinity();
    } else {
      current_statement__ = 86;
      type = stan::model::rvalue(type_in, "type_in",
               stan::model::index_uni(1));
      current_statement__ = 87;
      bound = stan::model::rvalue(bound_in, "bound_in",
                stan::model::index_uni(1));
    }
    current_statement__ = 94;
    if (stan::math::logical_eq(type, 0)) {
      current_statement__ = 93;
      lb = stan::math::negative_infinity();
    } else {
      current_statement__ = 92;
      lb = bound;
    }
    current_statement__ = 95;
    return lb;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
template <typename T1__,
          stan::require_all_t<stan::is_col_vector<T1__>,
                              stan::is_vt_not_complex<T1__>>*>
stan::promote_args_t<stan::base_type_t<T1__>>
coefs_ub(const std::vector<int>& type_in, const T1__& bound_in_arg__,
         std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::base_type_t<T1__>>;
  int current_statement__ = 0;
  const auto& bound_in = stan::math::to_ref(bound_in_arg__);
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    int type = std::numeric_limits<int>::min();
    local_scalar_t__ bound = DUMMY_VAR__;
    local_scalar_t__ lb = DUMMY_VAR__;
    current_statement__ = 105;
    if (stan::math::logical_eq(stan::math::num_elements(type_in), 0)) {
      current_statement__ = 103;
      return stan::math::positive_infinity();
    } else {
      current_statement__ = 100;
      type = stan::model::rvalue(type_in, "type_in",
               stan::model::index_uni(2));
      current_statement__ = 101;
      bound = stan::model::rvalue(bound_in, "bound_in",
                stan::model::index_uni(2));
    }
    current_statement__ = 108;
    if (stan::math::logical_eq(type, 0)) {
      current_statement__ = 107;
      lb = stan::math::positive_infinity();
    } else {
      current_statement__ = 106;
      lb = bound;
    }
    current_statement__ = 109;
    return lb;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
template <typename T1__,
          stan::require_all_t<stan::is_col_vector<T1__>,
                              stan::is_vt_not_complex<T1__>>*>
stan::promote_args_t<stan::base_type_t<T1__>>
data_lb(const int& is_trunc, const T1__& trunc_in_arg__, std::ostream*
        pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::base_type_t<T1__>>;
  int current_statement__ = 0;
  const auto& trunc_in = stan::math::to_ref(trunc_in_arg__);
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    local_scalar_t__ lb = DUMMY_VAR__;
    current_statement__ = 114;
    if (stan::math::logical_eq(is_trunc, 0)) {
      current_statement__ = 113;
      lb = stan::math::negative_infinity();
    } else {
      current_statement__ = 112;
      lb = stan::model::rvalue(trunc_in, "trunc_in",
             stan::model::index_uni(1));
    }
    current_statement__ = 115;
    return lb;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
template <typename T1__,
          stan::require_all_t<stan::is_col_vector<T1__>,
                              stan::is_vt_not_complex<T1__>>*>
stan::promote_args_t<stan::base_type_t<T1__>>
data_ub(const int& is_trunc, const T1__& trunc_in_arg__, std::ostream*
        pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::base_type_t<T1__>>;
  int current_statement__ = 0;
  const auto& trunc_in = stan::math::to_ref(trunc_in_arg__);
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    local_scalar_t__ ub = DUMMY_VAR__;
    current_statement__ = 120;
    if (stan::math::logical_eq(is_trunc, 0)) {
      current_statement__ = 119;
      ub = stan::math::positive_infinity();
    } else {
      current_statement__ = 118;
      ub = stan::model::rvalue(trunc_in, "trunc_in",
             stan::model::index_uni(2));
    }
    current_statement__ = 121;
    return ub;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
template <typename T0__, typename T2__, typename T4__,
          stan::require_all_t<stan::is_stan_scalar<T0__>,
                              stan::is_col_vector<T2__>,
                              stan::is_vt_not_complex<T2__>,
                              stan::is_col_vector<T4__>,
                              stan::is_vt_not_complex<T4__>>*>
stan::promote_args_t<T0__, stan::base_type_t<T2__>, stan::base_type_t<T4__>>
set_prior(const T0__& parameter, const int& prior_type, const T2__&
          prior_parameters_arg__, const std::vector<int>& bounds_type,
          const T4__& bounds_arg__, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__,
                             stan::base_type_t<T2__>,
                             stan::base_type_t<T4__>>;
  int current_statement__ = 0;
  const auto& prior_parameters = stan::math::to_ref(prior_parameters_arg__);
  const auto& bounds = stan::math::to_ref(bounds_arg__);
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    local_scalar_t__ ll = DUMMY_VAR__;
    current_statement__ = 228;
    if (stan::math::logical_eq(prior_type, 1)) {
      current_statement__ = 217;
      ll = stan::math::normal_lpdf<false>(parameter,
             stan::model::rvalue(prior_parameters, "prior_parameters",
               stan::model::index_uni(1)),
             stan::model::rvalue(prior_parameters, "prior_parameters",
               stan::model::index_uni(2)));
      current_statement__ = 226;
      if ((stan::math::primitive_value(
             stan::math::logical_neq(
               stan::model::rvalue(bounds_type, "bounds_type",
                 stan::model::index_uni(1)), 0))
          &&
          stan::math::primitive_value(
            stan::math::logical_neq(
              stan::model::rvalue(bounds_type, "bounds_type",
                stan::model::index_uni(2)), 0)))) {
        current_statement__ = 224;
        ll = (ll -
          stan::math::log_diff_exp(
            stan::math::normal_lcdf(
              stan::model::rvalue(bounds, "bounds", stan::model::index_uni(2)),
              stan::model::rvalue(prior_parameters, "prior_parameters",
                stan::model::index_uni(1)),
              stan::model::rvalue(prior_parameters, "prior_parameters",
                stan::model::index_uni(2))),
            stan::math::normal_lcdf(
              stan::model::rvalue(bounds, "bounds", stan::model::index_uni(1)),
              stan::model::rvalue(prior_parameters, "prior_parameters",
                stan::model::index_uni(1)),
              stan::model::rvalue(prior_parameters, "prior_parameters",
                stan::model::index_uni(2)))));
      } else {
        current_statement__ = 223;
        if (stan::math::logical_neq(
              stan::model::rvalue(bounds_type, "bounds_type",
                stan::model::index_uni(1)), 0)) {
          current_statement__ = 221;
          ll = (ll -
            stan::math::normal_lccdf(
              stan::model::rvalue(bounds, "bounds", stan::model::index_uni(1)),
              stan::model::rvalue(prior_parameters, "prior_parameters",
                stan::model::index_uni(1)),
              stan::model::rvalue(prior_parameters, "prior_parameters",
                stan::model::index_uni(2))));
        } else {
          current_statement__ = 220;
          if (stan::math::logical_neq(
                stan::model::rvalue(bounds_type, "bounds_type",
                  stan::model::index_uni(2)), 0)) {
            current_statement__ = 218;
            ll = (ll -
              stan::math::normal_lcdf(
                stan::model::rvalue(bounds, "bounds",
                  stan::model::index_uni(2)),
                stan::model::rvalue(prior_parameters, "prior_parameters",
                  stan::model::index_uni(1)),
                stan::model::rvalue(prior_parameters, "prior_parameters",
                  stan::model::index_uni(2))));
          }
        }
      }
    } else {
      current_statement__ = 216;
      if (stan::math::logical_eq(prior_type, 2)) {
        current_statement__ = 205;
        ll = stan::math::lognormal_lpdf<false>(parameter,
               stan::model::rvalue(prior_parameters, "prior_parameters",
                 stan::model::index_uni(1)),
               stan::model::rvalue(prior_parameters, "prior_parameters",
                 stan::model::index_uni(2)));
        current_statement__ = 214;
        if ((stan::math::primitive_value(
               stan::math::logical_neq(
                 stan::model::rvalue(bounds_type, "bounds_type",
                   stan::model::index_uni(1)), 0))
            &&
            stan::math::primitive_value(
              stan::math::logical_neq(
                stan::model::rvalue(bounds_type, "bounds_type",
                  stan::model::index_uni(2)), 0)))) {
          current_statement__ = 212;
          ll = (ll -
            stan::math::log_diff_exp(
              stan::math::lognormal_lcdf(
                stan::model::rvalue(bounds, "bounds",
                  stan::model::index_uni(2)),
                stan::model::rvalue(prior_parameters, "prior_parameters",
                  stan::model::index_uni(1)),
                stan::model::rvalue(prior_parameters, "prior_parameters",
                  stan::model::index_uni(2))),
              stan::math::lognormal_lcdf(
                stan::model::rvalue(bounds, "bounds",
                  stan::model::index_uni(1)),
                stan::model::rvalue(prior_parameters, "prior_parameters",
                  stan::model::index_uni(1)),
                stan::model::rvalue(prior_parameters, "prior_parameters",
                  stan::model::index_uni(2)))));
        } else {
          current_statement__ = 211;
          if (stan::math::logical_neq(
                stan::model::rvalue(bounds_type, "bounds_type",
                  stan::model::index_uni(1)), 0)) {
            current_statement__ = 209;
            ll = (ll -
              stan::math::lognormal_lccdf(
                stan::model::rvalue(bounds, "bounds",
                  stan::model::index_uni(1)),
                stan::model::rvalue(prior_parameters, "prior_parameters",
                  stan::model::index_uni(1)),
                stan::model::rvalue(prior_parameters, "prior_parameters",
                  stan::model::index_uni(2))));
          } else {
            current_statement__ = 208;
            if (stan::math::logical_neq(
                  stan::model::rvalue(bounds_type, "bounds_type",
                    stan::model::index_uni(2)), 0)) {
              current_statement__ = 206;
              ll = (ll -
                stan::math::lognormal_lcdf(
                  stan::model::rvalue(bounds, "bounds",
                    stan::model::index_uni(2)),
                  stan::model::rvalue(prior_parameters, "prior_parameters",
                    stan::model::index_uni(1)),
                  stan::model::rvalue(prior_parameters, "prior_parameters",
                    stan::model::index_uni(2))));
            }
          }
        }
      } else {
        current_statement__ = 204;
        if (stan::math::logical_eq(prior_type, 3)) {
          current_statement__ = 193;
          ll = stan::math::cauchy_lpdf<false>(parameter,
                 stan::model::rvalue(prior_parameters, "prior_parameters",
                   stan::model::index_uni(1)),
                 stan::model::rvalue(prior_parameters, "prior_parameters",
                   stan::model::index_uni(2)));
          current_statement__ = 202;
          if ((stan::math::primitive_value(
                 stan::math::logical_neq(
                   stan::model::rvalue(bounds_type, "bounds_type",
                     stan::model::index_uni(1)), 0))
              &&
              stan::math::primitive_value(
                stan::math::logical_neq(
                  stan::model::rvalue(bounds_type, "bounds_type",
                    stan::model::index_uni(2)), 0)))) {
            current_statement__ = 200;
            ll = (ll -
              stan::math::log_diff_exp(
                stan::math::cauchy_lcdf(
                  stan::model::rvalue(bounds, "bounds",
                    stan::model::index_uni(2)),
                  stan::model::rvalue(prior_parameters, "prior_parameters",
                    stan::model::index_uni(1)),
                  stan::model::rvalue(prior_parameters, "prior_parameters",
                    stan::model::index_uni(2))),
                stan::math::cauchy_lcdf(
                  stan::model::rvalue(bounds, "bounds",
                    stan::model::index_uni(1)),
                  stan::model::rvalue(prior_parameters, "prior_parameters",
                    stan::model::index_uni(1)),
                  stan::model::rvalue(prior_parameters, "prior_parameters",
                    stan::model::index_uni(2)))));
          } else {
            current_statement__ = 199;
            if (stan::math::logical_neq(
                  stan::model::rvalue(bounds_type, "bounds_type",
                    stan::model::index_uni(1)), 0)) {
              current_statement__ = 197;
              ll = (ll -
                stan::math::cauchy_lccdf(
                  stan::model::rvalue(bounds, "bounds",
                    stan::model::index_uni(1)),
                  stan::model::rvalue(prior_parameters, "prior_parameters",
                    stan::model::index_uni(1)),
                  stan::model::rvalue(prior_parameters, "prior_parameters",
                    stan::model::index_uni(2))));
            } else {
              current_statement__ = 196;
              if (stan::math::logical_neq(
                    stan::model::rvalue(bounds_type, "bounds_type",
                      stan::model::index_uni(2)), 0)) {
                current_statement__ = 194;
                ll = (ll -
                  stan::math::cauchy_lcdf(
                    stan::model::rvalue(bounds, "bounds",
                      stan::model::index_uni(2)),
                    stan::model::rvalue(prior_parameters, "prior_parameters",
                      stan::model::index_uni(1)),
                    stan::model::rvalue(prior_parameters, "prior_parameters",
                      stan::model::index_uni(2))));
              }
            }
          }
        } else {
          current_statement__ = 192;
          if (stan::math::logical_eq(prior_type, 4)) {
            current_statement__ = 181;
            ll = stan::math::student_t_lpdf<false>(parameter,
                   stan::model::rvalue(prior_parameters, "prior_parameters",
                     stan::model::index_uni(1)),
                   stan::model::rvalue(prior_parameters, "prior_parameters",
                     stan::model::index_uni(2)),
                   stan::model::rvalue(prior_parameters, "prior_parameters",
                     stan::model::index_uni(3)));
            current_statement__ = 190;
            if ((stan::math::primitive_value(
                   stan::math::logical_neq(
                     stan::model::rvalue(bounds_type, "bounds_type",
                       stan::model::index_uni(1)), 0))
                &&
                stan::math::primitive_value(
                  stan::math::logical_neq(
                    stan::model::rvalue(bounds_type, "bounds_type",
                      stan::model::index_uni(2)), 0)))) {
              current_statement__ = 188;
              ll = (ll -
                stan::math::log_diff_exp(
                  stan::math::student_t_lcdf(
                    stan::model::rvalue(bounds, "bounds",
                      stan::model::index_uni(2)),
                    stan::model::rvalue(prior_parameters, "prior_parameters",
                      stan::model::index_uni(1)),
                    stan::model::rvalue(prior_parameters, "prior_parameters",
                      stan::model::index_uni(2)),
                    stan::model::rvalue(prior_parameters, "prior_parameters",
                      stan::model::index_uni(3))),
                  stan::math::student_t_lcdf(
                    stan::model::rvalue(bounds, "bounds",
                      stan::model::index_uni(1)),
                    stan::model::rvalue(prior_parameters, "prior_parameters",
                      stan::model::index_uni(1)),
                    stan::model::rvalue(prior_parameters, "prior_parameters",
                      stan::model::index_uni(2)),
                    stan::model::rvalue(prior_parameters, "prior_parameters",
                      stan::model::index_uni(3)))));
            } else {
              current_statement__ = 187;
              if (stan::math::logical_neq(
                    stan::model::rvalue(bounds_type, "bounds_type",
                      stan::model::index_uni(1)), 0)) {
                current_statement__ = 185;
                ll = (ll -
                  stan::math::student_t_lccdf(
                    stan::model::rvalue(bounds, "bounds",
                      stan::model::index_uni(1)),
                    stan::model::rvalue(prior_parameters, "prior_parameters",
                      stan::model::index_uni(1)),
                    stan::model::rvalue(prior_parameters, "prior_parameters",
                      stan::model::index_uni(2)),
                    stan::model::rvalue(prior_parameters, "prior_parameters",
                      stan::model::index_uni(3))));
              } else {
                current_statement__ = 184;
                if (stan::math::logical_neq(
                      stan::model::rvalue(bounds_type, "bounds_type",
                        stan::model::index_uni(2)), 0)) {
                  current_statement__ = 182;
                  ll = (ll -
                    stan::math::student_t_lcdf(
                      stan::model::rvalue(bounds, "bounds",
                        stan::model::index_uni(2)),
                      stan::model::rvalue(prior_parameters,
                        "prior_parameters", stan::model::index_uni(1)),
                      stan::model::rvalue(prior_parameters,
                        "prior_parameters", stan::model::index_uni(2)),
                      stan::model::rvalue(prior_parameters,
                        "prior_parameters", stan::model::index_uni(3))));
                }
              }
            }
          } else {
            current_statement__ = 180;
            if (stan::math::logical_eq(prior_type, 5)) {
              current_statement__ = 169;
              ll = stan::math::gamma_lpdf<false>(parameter,
                     stan::model::rvalue(prior_parameters,
                       "prior_parameters", stan::model::index_uni(1)),
                     stan::model::rvalue(prior_parameters,
                       "prior_parameters", stan::model::index_uni(2)));
              current_statement__ = 178;
              if ((stan::math::primitive_value(
                     stan::math::logical_neq(
                       stan::model::rvalue(bounds_type, "bounds_type",
                         stan::model::index_uni(1)), 0))
                  &&
                  stan::math::primitive_value(
                    stan::math::logical_neq(
                      stan::model::rvalue(bounds_type, "bounds_type",
                        stan::model::index_uni(2)), 0)))) {
                current_statement__ = 176;
                ll = (ll -
                  stan::math::log_diff_exp(
                    stan::math::gamma_lcdf(
                      stan::model::rvalue(bounds, "bounds",
                        stan::model::index_uni(2)),
                      stan::model::rvalue(prior_parameters,
                        "prior_parameters", stan::model::index_uni(1)),
                      stan::model::rvalue(prior_parameters,
                        "prior_parameters", stan::model::index_uni(2))),
                    stan::math::gamma_lcdf(
                      stan::model::rvalue(bounds, "bounds",
                        stan::model::index_uni(1)),
                      stan::model::rvalue(prior_parameters,
                        "prior_parameters", stan::model::index_uni(1)),
                      stan::model::rvalue(prior_parameters,
                        "prior_parameters", stan::model::index_uni(2)))));
              } else {
                current_statement__ = 175;
                if (stan::math::logical_neq(
                      stan::model::rvalue(bounds_type, "bounds_type",
                        stan::model::index_uni(1)), 0)) {
                  current_statement__ = 173;
                  ll = (ll -
                    stan::math::gamma_lccdf(
                      stan::model::rvalue(bounds, "bounds",
                        stan::model::index_uni(1)),
                      stan::model::rvalue(prior_parameters,
                        "prior_parameters", stan::model::index_uni(1)),
                      stan::model::rvalue(prior_parameters,
                        "prior_parameters", stan::model::index_uni(2))));
                } else {
                  current_statement__ = 172;
                  if (stan::math::logical_neq(
                        stan::model::rvalue(bounds_type, "bounds_type",
                          stan::model::index_uni(2)), 0)) {
                    current_statement__ = 170;
                    ll = (ll -
                      stan::math::gamma_lcdf(
                        stan::model::rvalue(bounds, "bounds",
                          stan::model::index_uni(2)),
                        stan::model::rvalue(prior_parameters,
                          "prior_parameters", stan::model::index_uni(1)),
                        stan::model::rvalue(prior_parameters,
                          "prior_parameters", stan::model::index_uni(2))));
                  }
                }
              }
            } else {
              current_statement__ = 168;
              if (stan::math::logical_eq(prior_type, 6)) {
                current_statement__ = 157;
                ll = stan::math::inv_gamma_lpdf<false>(parameter,
                       stan::model::rvalue(prior_parameters,
                         "prior_parameters", stan::model::index_uni(1)),
                       stan::model::rvalue(prior_parameters,
                         "prior_parameters", stan::model::index_uni(2)));
                current_statement__ = 166;
                if ((stan::math::primitive_value(
                       stan::math::logical_neq(
                         stan::model::rvalue(bounds_type, "bounds_type",
                           stan::model::index_uni(1)), 0))
                    &&
                    stan::math::primitive_value(
                      stan::math::logical_neq(
                        stan::model::rvalue(bounds_type, "bounds_type",
                          stan::model::index_uni(2)), 0)))) {
                  current_statement__ = 164;
                  ll = (ll -
                    stan::math::log_diff_exp(
                      stan::math::inv_gamma_lcdf(
                        stan::model::rvalue(bounds, "bounds",
                          stan::model::index_uni(2)),
                        stan::model::rvalue(prior_parameters,
                          "prior_parameters", stan::model::index_uni(1)),
                        stan::model::rvalue(prior_parameters,
                          "prior_parameters", stan::model::index_uni(2))),
                      stan::math::inv_gamma_lcdf(
                        stan::model::rvalue(bounds, "bounds",
                          stan::model::index_uni(1)),
                        stan::model::rvalue(prior_parameters,
                          "prior_parameters", stan::model::index_uni(1)),
                        stan::model::rvalue(prior_parameters,
                          "prior_parameters", stan::model::index_uni(2)))));
                } else {
                  current_statement__ = 163;
                  if (stan::math::logical_neq(
                        stan::model::rvalue(bounds_type, "bounds_type",
                          stan::model::index_uni(1)), 0)) {
                    current_statement__ = 161;
                    ll = (ll -
                      stan::math::inv_gamma_lccdf(
                        stan::model::rvalue(bounds, "bounds",
                          stan::model::index_uni(1)),
                        stan::model::rvalue(prior_parameters,
                          "prior_parameters", stan::model::index_uni(1)),
                        stan::model::rvalue(prior_parameters,
                          "prior_parameters", stan::model::index_uni(2))));
                  } else {
                    current_statement__ = 160;
                    if (stan::math::logical_neq(
                          stan::model::rvalue(bounds_type, "bounds_type",
                            stan::model::index_uni(2)), 0)) {
                      current_statement__ = 158;
                      ll = (ll -
                        stan::math::inv_gamma_lcdf(
                          stan::model::rvalue(bounds, "bounds",
                            stan::model::index_uni(2)),
                          stan::model::rvalue(prior_parameters,
                            "prior_parameters", stan::model::index_uni(1)),
                          stan::model::rvalue(prior_parameters,
                            "prior_parameters", stan::model::index_uni(2))));
                    }
                  }
                }
              } else {
                current_statement__ = 156;
                if (stan::math::logical_eq(prior_type, 7)) {
                  current_statement__ = 154;
                  ll = stan::math::uniform_lpdf<false>(parameter,
                         stan::model::rvalue(prior_parameters,
                           "prior_parameters", stan::model::index_uni(1)),
                         stan::model::rvalue(prior_parameters,
                           "prior_parameters", stan::model::index_uni(2)));
                } else {
                  current_statement__ = 153;
                  if (stan::math::logical_eq(prior_type, 8)) {
                    current_statement__ = 142;
                    ll = stan::math::beta_lpdf<false>(parameter,
                           stan::model::rvalue(prior_parameters,
                             "prior_parameters", stan::model::index_uni(1)),
                           stan::model::rvalue(prior_parameters,
                             "prior_parameters", stan::model::index_uni(2)));
                    current_statement__ = 151;
                    if ((stan::math::primitive_value(
                           stan::math::logical_neq(
                             stan::model::rvalue(bounds_type, "bounds_type",
                               stan::model::index_uni(1)), 0))
                        &&
                        stan::math::primitive_value(
                          stan::math::logical_neq(
                            stan::model::rvalue(bounds_type, "bounds_type",
                              stan::model::index_uni(2)), 0)))) {
                      current_statement__ = 149;
                      ll = (ll -
                        stan::math::log_diff_exp(
                          stan::math::beta_lcdf(
                            stan::model::rvalue(bounds, "bounds",
                              stan::model::index_uni(2)),
                            stan::model::rvalue(prior_parameters,
                              "prior_parameters", stan::model::index_uni(1)),
                            stan::model::rvalue(prior_parameters,
                              "prior_parameters", stan::model::index_uni(2))),
                          stan::math::beta_lcdf(
                            stan::model::rvalue(bounds, "bounds",
                              stan::model::index_uni(1)),
                            stan::model::rvalue(prior_parameters,
                              "prior_parameters", stan::model::index_uni(1)),
                            stan::model::rvalue(prior_parameters,
                              "prior_parameters", stan::model::index_uni(2)))));
                    } else {
                      current_statement__ = 148;
                      if (stan::math::logical_neq(
                            stan::model::rvalue(bounds_type, "bounds_type",
                              stan::model::index_uni(1)), 0)) {
                        current_statement__ = 146;
                        ll = (ll -
                          stan::math::beta_lccdf(
                            stan::model::rvalue(bounds, "bounds",
                              stan::model::index_uni(1)),
                            stan::model::rvalue(prior_parameters,
                              "prior_parameters", stan::model::index_uni(1)),
                            stan::model::rvalue(prior_parameters,
                              "prior_parameters", stan::model::index_uni(2))));
                      } else {
                        current_statement__ = 145;
                        if (stan::math::logical_neq(
                              stan::model::rvalue(bounds_type, "bounds_type",
                                stan::model::index_uni(2)), 0)) {
                          current_statement__ = 143;
                          ll = (ll -
                            stan::math::beta_lcdf(
                              stan::model::rvalue(bounds, "bounds",
                                stan::model::index_uni(2)),
                              stan::model::rvalue(prior_parameters,
                                "prior_parameters", stan::model::index_uni(1)),
                              stan::model::rvalue(prior_parameters,
                                "prior_parameters", stan::model::index_uni(2))));
                        }
                      }
                    }
                  } else {
                    current_statement__ = 141;
                    if (stan::math::logical_eq(prior_type, 9)) {
                      current_statement__ = 130;
                      ll = stan::math::exponential_lpdf<false>(parameter,
                             stan::model::rvalue(prior_parameters,
                               "prior_parameters", stan::model::index_uni(1)));
                      current_statement__ = 139;
                      if ((stan::math::primitive_value(
                             stan::math::logical_neq(
                               stan::model::rvalue(bounds_type,
                                 "bounds_type", stan::model::index_uni(1)), 0))
                          &&
                          stan::math::primitive_value(
                            stan::math::logical_neq(
                              stan::model::rvalue(bounds_type, "bounds_type",
                                stan::model::index_uni(2)), 0)))) {
                        current_statement__ = 137;
                        ll = (ll -
                          stan::math::log_diff_exp(
                            stan::math::exponential_lcdf(
                              stan::model::rvalue(bounds, "bounds",
                                stan::model::index_uni(2)),
                              stan::model::rvalue(prior_parameters,
                                "prior_parameters", stan::model::index_uni(1))),
                            stan::math::exponential_lcdf(
                              stan::model::rvalue(bounds, "bounds",
                                stan::model::index_uni(1)),
                              stan::model::rvalue(prior_parameters,
                                "prior_parameters", stan::model::index_uni(1)))));
                      } else {
                        current_statement__ = 136;
                        if (stan::math::logical_neq(
                              stan::model::rvalue(bounds_type, "bounds_type",
                                stan::model::index_uni(1)), 0)) {
                          current_statement__ = 134;
                          ll = (ll -
                            stan::math::exponential_lccdf(
                              stan::model::rvalue(bounds, "bounds",
                                stan::model::index_uni(1)),
                              stan::model::rvalue(prior_parameters,
                                "prior_parameters", stan::model::index_uni(1))));
                        } else {
                          current_statement__ = 133;
                          if (stan::math::logical_neq(
                                stan::model::rvalue(bounds_type,
                                  "bounds_type", stan::model::index_uni(2)),
                                0)) {
                            current_statement__ = 131;
                            ll = (ll -
                              stan::math::exponential_lcdf(
                                stan::model::rvalue(bounds, "bounds",
                                  stan::model::index_uni(2)),
                                stan::model::rvalue(prior_parameters,
                                  "prior_parameters",
                                  stan::model::index_uni(1))));
                          }
                        }
                      }
                    } else {
                      current_statement__ = 129;
                      if (stan::math::logical_eq(prior_type, 98)) {
                        current_statement__ = 127;
                        ll = Jeffreys_mu_lpdf<false>(parameter, pstream__);
                      } else {
                        current_statement__ = 126;
                        if (stan::math::logical_eq(prior_type, 99)) {
                          current_statement__ = 124;
                          ll = Jeffreys_sigma_lpdf<false>(parameter,
                                 pstream__);
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    current_statement__ = 229;
    return ll;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
#include <stan_meta_header.hpp>
class model_lognormal final : public model_base_crtp<model_lognormal> {
private:
  int is_ss;
  int N1;
  int N2;
  Eigen::Matrix<double,-1,1> x1_data__;
  Eigen::Matrix<double,-1,1> x2_data__;
  Eigen::Matrix<double,-1,1> mean_i_data__;
  Eigen::Matrix<double,-1,1> sd_i_data__;
  int is_d;
  int is_r;
  Eigen::Matrix<double,-1,1> bounds_d_data__;
  Eigen::Matrix<double,-1,1> bounds_r_data__;
  std::vector<int> bounds_type_d;
  std::vector<int> bounds_type_r;
  Eigen::Matrix<double,-1,1> fixed_d_data__;
  Eigen::Matrix<double,-1,1> fixed_r_data__;
  Eigen::Matrix<double,-1,1> prior_parameters_d_data__;
  Eigen::Matrix<double,-1,1> prior_parameters_r_data__;
  int prior_type_d;
  int prior_type_r;
  Eigen::Map<Eigen::Matrix<double,-1,1>> x1{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> x2{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> mean_i{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> sd_i{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> bounds_d{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> bounds_r{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> fixed_d{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> fixed_r{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> prior_parameters_d{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> prior_parameters_r{nullptr, 0};
public:
  ~model_lognormal() {}
  model_lognormal(stan::io::var_context& context__, unsigned int
                  random_seed__ = 0, std::ostream* pstream__ = nullptr)
      : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double;
    boost::ecuyer1988 base_rng__ =
      stan::services::util::create_rng(random_seed__, 0);
    // suppress unused var warning
    (void) base_rng__;
    static constexpr const char* function__ =
      "model_lognormal_namespace::model_lognormal";
    // suppress unused var warning
    (void) function__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      current_statement__ = 44;
      context__.validate_dims("data initialization", "is_ss", "int",
        std::vector<size_t>{});
      is_ss = std::numeric_limits<int>::min();
      current_statement__ = 44;
      is_ss = context__.vals_i("is_ss")[(1 - 1)];
      current_statement__ = 45;
      context__.validate_dims("data initialization", "N1", "int",
        std::vector<size_t>{});
      N1 = std::numeric_limits<int>::min();
      current_statement__ = 45;
      N1 = context__.vals_i("N1")[(1 - 1)];
      current_statement__ = 45;
      stan::math::check_greater_or_equal(function__, "N1", N1, 0);
      current_statement__ = 46;
      context__.validate_dims("data initialization", "N2", "int",
        std::vector<size_t>{});
      N2 = std::numeric_limits<int>::min();
      current_statement__ = 46;
      N2 = context__.vals_i("N2")[(1 - 1)];
      current_statement__ = 46;
      stan::math::check_greater_or_equal(function__, "N2", N2, 0);
      current_statement__ = 47;
      stan::math::validate_non_negative_index("x1", "is_ss == 0 ? N1 : 0",
        (stan::math::logical_eq(is_ss, 0) ? N1 : 0));
      current_statement__ = 48;
      context__.validate_dims("data initialization", "x1", "double",
        std::vector<size_t>{static_cast<size_t>(
                              (stan::math::logical_eq(is_ss, 0) ? N1 : 0))});
      x1_data__ = Eigen::Matrix<double,-1,1>::Constant((stan::math::logical_eq(
                                                          is_ss, 0) ? N1 : 0),
                    std::numeric_limits<double>::quiet_NaN());
      new (&x1) Eigen::Map<Eigen::Matrix<double,-1,1>>(x1_data__.data(),
        (stan::math::logical_eq(is_ss, 0) ? N1 : 0));
      {
        std::vector<local_scalar_t__> x1_flat__;
        current_statement__ = 48;
        x1_flat__ = context__.vals_r("x1");
        current_statement__ = 48;
        pos__ = 1;
        current_statement__ = 48;
        for (int sym1__ = 1; sym1__ <=
             (stan::math::logical_eq(is_ss, 0) ? N1 : 0); ++sym1__) {
          current_statement__ = 48;
          stan::model::assign(x1, x1_flat__[(pos__ - 1)],
            "assigning variable x1", stan::model::index_uni(sym1__));
          current_statement__ = 48;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 49;
      stan::math::validate_non_negative_index("x2", "is_ss == 0 ? N2 : 0",
        (stan::math::logical_eq(is_ss, 0) ? N2 : 0));
      current_statement__ = 50;
      context__.validate_dims("data initialization", "x2", "double",
        std::vector<size_t>{static_cast<size_t>(
                              (stan::math::logical_eq(is_ss, 0) ? N2 : 0))});
      x2_data__ = Eigen::Matrix<double,-1,1>::Constant((stan::math::logical_eq(
                                                          is_ss, 0) ? N2 : 0),
                    std::numeric_limits<double>::quiet_NaN());
      new (&x2) Eigen::Map<Eigen::Matrix<double,-1,1>>(x2_data__.data(),
        (stan::math::logical_eq(is_ss, 0) ? N2 : 0));
      {
        std::vector<local_scalar_t__> x2_flat__;
        current_statement__ = 50;
        x2_flat__ = context__.vals_r("x2");
        current_statement__ = 50;
        pos__ = 1;
        current_statement__ = 50;
        for (int sym1__ = 1; sym1__ <=
             (stan::math::logical_eq(is_ss, 0) ? N2 : 0); ++sym1__) {
          current_statement__ = 50;
          stan::model::assign(x2, x2_flat__[(pos__ - 1)],
            "assigning variable x2", stan::model::index_uni(sym1__));
          current_statement__ = 50;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 51;
      stan::math::validate_non_negative_index("mean_i", "is_ss == 1 ? 2 : 0",
        (stan::math::logical_eq(is_ss, 1) ? 2 : 0));
      current_statement__ = 52;
      context__.validate_dims("data initialization", "mean_i", "double",
        std::vector<size_t>{static_cast<size_t>(
                              (stan::math::logical_eq(is_ss, 1) ? 2 : 0))});
      mean_i_data__ = Eigen::Matrix<double,-1,1>::Constant((stan::math::logical_eq(
                                                              is_ss, 1) ? 2 : 0),
                        std::numeric_limits<double>::quiet_NaN());
      new (&mean_i)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(mean_i_data__.data(),
        (stan::math::logical_eq(is_ss, 1) ? 2 : 0));
      {
        std::vector<local_scalar_t__> mean_i_flat__;
        current_statement__ = 52;
        mean_i_flat__ = context__.vals_r("mean_i");
        current_statement__ = 52;
        pos__ = 1;
        current_statement__ = 52;
        for (int sym1__ = 1; sym1__ <=
             (stan::math::logical_eq(is_ss, 1) ? 2 : 0); ++sym1__) {
          current_statement__ = 52;
          stan::model::assign(mean_i, mean_i_flat__[(pos__ - 1)],
            "assigning variable mean_i", stan::model::index_uni(sym1__));
          current_statement__ = 52;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 53;
      stan::math::validate_non_negative_index("sd_i", "is_ss == 1 ? 2 : 0",
        (stan::math::logical_eq(is_ss, 1) ? 2 : 0));
      current_statement__ = 54;
      context__.validate_dims("data initialization", "sd_i", "double",
        std::vector<size_t>{static_cast<size_t>(
                              (stan::math::logical_eq(is_ss, 1) ? 2 : 0))});
      sd_i_data__ = Eigen::Matrix<double,-1,1>::Constant((stan::math::logical_eq(
                                                            is_ss, 1) ? 2 : 0),
                      std::numeric_limits<double>::quiet_NaN());
      new (&sd_i) Eigen::Map<Eigen::Matrix<double,-1,1>>(sd_i_data__.data(),
        (stan::math::logical_eq(is_ss, 1) ? 2 : 0));
      {
        std::vector<local_scalar_t__> sd_i_flat__;
        current_statement__ = 54;
        sd_i_flat__ = context__.vals_r("sd_i");
        current_statement__ = 54;
        pos__ = 1;
        current_statement__ = 54;
        for (int sym1__ = 1; sym1__ <=
             (stan::math::logical_eq(is_ss, 1) ? 2 : 0); ++sym1__) {
          current_statement__ = 54;
          stan::model::assign(sd_i, sd_i_flat__[(pos__ - 1)],
            "assigning variable sd_i", stan::model::index_uni(sym1__));
          current_statement__ = 54;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 55;
      context__.validate_dims("data initialization", "is_d", "int",
        std::vector<size_t>{});
      is_d = std::numeric_limits<int>::min();
      current_statement__ = 55;
      is_d = context__.vals_i("is_d")[(1 - 1)];
      current_statement__ = 56;
      context__.validate_dims("data initialization", "is_r", "int",
        std::vector<size_t>{});
      is_r = std::numeric_limits<int>::min();
      current_statement__ = 56;
      is_r = context__.vals_i("is_r")[(1 - 1)];
      current_statement__ = 57;
      stan::math::validate_non_negative_index("bounds_d",
        "is_d == 1 ? 2 : 0", (stan::math::logical_eq(is_d, 1) ? 2 : 0));
      current_statement__ = 58;
      context__.validate_dims("data initialization", "bounds_d", "double",
        std::vector<size_t>{static_cast<size_t>(
                              (stan::math::logical_eq(is_d, 1) ? 2 : 0))});
      bounds_d_data__ = Eigen::Matrix<double,-1,1>::Constant((stan::math::logical_eq(
                                                                is_d, 1) ? 2 : 0),
                          std::numeric_limits<double>::quiet_NaN());
      new (&bounds_d)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(bounds_d_data__.data(),
        (stan::math::logical_eq(is_d, 1) ? 2 : 0));
      {
        std::vector<local_scalar_t__> bounds_d_flat__;
        current_statement__ = 58;
        bounds_d_flat__ = context__.vals_r("bounds_d");
        current_statement__ = 58;
        pos__ = 1;
        current_statement__ = 58;
        for (int sym1__ = 1; sym1__ <=
             (stan::math::logical_eq(is_d, 1) ? 2 : 0); ++sym1__) {
          current_statement__ = 58;
          stan::model::assign(bounds_d, bounds_d_flat__[(pos__ - 1)],
            "assigning variable bounds_d", stan::model::index_uni(sym1__));
          current_statement__ = 58;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 59;
      stan::math::validate_non_negative_index("bounds_r",
        "is_r == 1 ? 2 : 0", (stan::math::logical_eq(is_r, 1) ? 2 : 0));
      current_statement__ = 60;
      context__.validate_dims("data initialization", "bounds_r", "double",
        std::vector<size_t>{static_cast<size_t>(
                              (stan::math::logical_eq(is_r, 1) ? 2 : 0))});
      bounds_r_data__ = Eigen::Matrix<double,-1,1>::Constant((stan::math::logical_eq(
                                                                is_r, 1) ? 2 : 0),
                          std::numeric_limits<double>::quiet_NaN());
      new (&bounds_r)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(bounds_r_data__.data(),
        (stan::math::logical_eq(is_r, 1) ? 2 : 0));
      {
        std::vector<local_scalar_t__> bounds_r_flat__;
        current_statement__ = 60;
        bounds_r_flat__ = context__.vals_r("bounds_r");
        current_statement__ = 60;
        pos__ = 1;
        current_statement__ = 60;
        for (int sym1__ = 1; sym1__ <=
             (stan::math::logical_eq(is_r, 1) ? 2 : 0); ++sym1__) {
          current_statement__ = 60;
          stan::model::assign(bounds_r, bounds_r_flat__[(pos__ - 1)],
            "assigning variable bounds_r", stan::model::index_uni(sym1__));
          current_statement__ = 60;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 61;
      stan::math::validate_non_negative_index("bounds_type_d",
        "is_d == 1 ? 2 : 0", (stan::math::logical_eq(is_d, 1) ? 2 : 0));
      current_statement__ = 62;
      context__.validate_dims("data initialization", "bounds_type_d", "int",
        std::vector<size_t>{static_cast<size_t>(
                              (stan::math::logical_eq(is_d, 1) ? 2 : 0))});
      bounds_type_d = std::vector<int>((stan::math::logical_eq(is_d, 1) ? 2 : 0),
                        std::numeric_limits<int>::min());
      current_statement__ = 62;
      bounds_type_d = context__.vals_i("bounds_type_d");
      current_statement__ = 63;
      stan::math::validate_non_negative_index("bounds_type_r",
        "is_r == 1 ? 2 : 0", (stan::math::logical_eq(is_r, 1) ? 2 : 0));
      current_statement__ = 64;
      context__.validate_dims("data initialization", "bounds_type_r", "int",
        std::vector<size_t>{static_cast<size_t>(
                              (stan::math::logical_eq(is_r, 1) ? 2 : 0))});
      bounds_type_r = std::vector<int>((stan::math::logical_eq(is_r, 1) ? 2 : 0),
                        std::numeric_limits<int>::min());
      current_statement__ = 64;
      bounds_type_r = context__.vals_i("bounds_type_r");
      current_statement__ = 65;
      stan::math::validate_non_negative_index("fixed_d", "is_d == 0 ? 1 : 0",
        (stan::math::logical_eq(is_d, 0) ? 1 : 0));
      current_statement__ = 66;
      context__.validate_dims("data initialization", "fixed_d", "double",
        std::vector<size_t>{static_cast<size_t>(
                              (stan::math::logical_eq(is_d, 0) ? 1 : 0))});
      fixed_d_data__ = Eigen::Matrix<double,-1,1>::Constant((stan::math::logical_eq(
                                                               is_d, 0) ? 1 : 0),
                         std::numeric_limits<double>::quiet_NaN());
      new (&fixed_d)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(fixed_d_data__.data(),
        (stan::math::logical_eq(is_d, 0) ? 1 : 0));
      {
        std::vector<local_scalar_t__> fixed_d_flat__;
        current_statement__ = 66;
        fixed_d_flat__ = context__.vals_r("fixed_d");
        current_statement__ = 66;
        pos__ = 1;
        current_statement__ = 66;
        for (int sym1__ = 1; sym1__ <=
             (stan::math::logical_eq(is_d, 0) ? 1 : 0); ++sym1__) {
          current_statement__ = 66;
          stan::model::assign(fixed_d, fixed_d_flat__[(pos__ - 1)],
            "assigning variable fixed_d", stan::model::index_uni(sym1__));
          current_statement__ = 66;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 67;
      stan::math::validate_non_negative_index("fixed_r", "is_r == 0 ? 1 : 0",
        (stan::math::logical_eq(is_r, 0) ? 1 : 0));
      current_statement__ = 68;
      context__.validate_dims("data initialization", "fixed_r", "double",
        std::vector<size_t>{static_cast<size_t>(
                              (stan::math::logical_eq(is_r, 0) ? 1 : 0))});
      fixed_r_data__ = Eigen::Matrix<double,-1,1>::Constant((stan::math::logical_eq(
                                                               is_r, 0) ? 1 : 0),
                         std::numeric_limits<double>::quiet_NaN());
      new (&fixed_r)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(fixed_r_data__.data(),
        (stan::math::logical_eq(is_r, 0) ? 1 : 0));
      {
        std::vector<local_scalar_t__> fixed_r_flat__;
        current_statement__ = 68;
        fixed_r_flat__ = context__.vals_r("fixed_r");
        current_statement__ = 68;
        pos__ = 1;
        current_statement__ = 68;
        for (int sym1__ = 1; sym1__ <=
             (stan::math::logical_eq(is_r, 0) ? 1 : 0); ++sym1__) {
          current_statement__ = 68;
          stan::model::assign(fixed_r, fixed_r_flat__[(pos__ - 1)],
            "assigning variable fixed_r", stan::model::index_uni(sym1__));
          current_statement__ = 68;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 69;
      stan::math::validate_non_negative_index("prior_parameters_d",
        "is_d == 1 ? 3 : 0", (stan::math::logical_eq(is_d, 1) ? 3 : 0));
      current_statement__ = 70;
      context__.validate_dims("data initialization", "prior_parameters_d",
        "double",
        std::vector<size_t>{static_cast<size_t>(
                              (stan::math::logical_eq(is_d, 1) ? 3 : 0))});
      prior_parameters_d_data__ = Eigen::Matrix<double,-1,1>::Constant((
                                    stan::math::logical_eq(is_d, 1) ? 3 : 0),
                                    std::numeric_limits<double>::quiet_NaN());
      new (&prior_parameters_d)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(prior_parameters_d_data__.data(),
        (stan::math::logical_eq(is_d, 1) ? 3 : 0));
      {
        std::vector<local_scalar_t__> prior_parameters_d_flat__;
        current_statement__ = 70;
        prior_parameters_d_flat__ = context__.vals_r("prior_parameters_d");
        current_statement__ = 70;
        pos__ = 1;
        current_statement__ = 70;
        for (int sym1__ = 1; sym1__ <=
             (stan::math::logical_eq(is_d, 1) ? 3 : 0); ++sym1__) {
          current_statement__ = 70;
          stan::model::assign(prior_parameters_d,
            prior_parameters_d_flat__[(pos__ - 1)],
            "assigning variable prior_parameters_d",
            stan::model::index_uni(sym1__));
          current_statement__ = 70;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 71;
      stan::math::validate_non_negative_index("prior_parameters_r",
        "is_r == 1 ? 3 : 0", (stan::math::logical_eq(is_r, 1) ? 3 : 0));
      current_statement__ = 72;
      context__.validate_dims("data initialization", "prior_parameters_r",
        "double",
        std::vector<size_t>{static_cast<size_t>(
                              (stan::math::logical_eq(is_r, 1) ? 3 : 0))});
      prior_parameters_r_data__ = Eigen::Matrix<double,-1,1>::Constant((
                                    stan::math::logical_eq(is_r, 1) ? 3 : 0),
                                    std::numeric_limits<double>::quiet_NaN());
      new (&prior_parameters_r)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(prior_parameters_r_data__.data(),
        (stan::math::logical_eq(is_r, 1) ? 3 : 0));
      {
        std::vector<local_scalar_t__> prior_parameters_r_flat__;
        current_statement__ = 72;
        prior_parameters_r_flat__ = context__.vals_r("prior_parameters_r");
        current_statement__ = 72;
        pos__ = 1;
        current_statement__ = 72;
        for (int sym1__ = 1; sym1__ <=
             (stan::math::logical_eq(is_r, 1) ? 3 : 0); ++sym1__) {
          current_statement__ = 72;
          stan::model::assign(prior_parameters_r,
            prior_parameters_r_flat__[(pos__ - 1)],
            "assigning variable prior_parameters_r",
            stan::model::index_uni(sym1__));
          current_statement__ = 72;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 73;
      context__.validate_dims("data initialization", "prior_type_d", "int",
        std::vector<size_t>{});
      prior_type_d = std::numeric_limits<int>::min();
      current_statement__ = 73;
      prior_type_d = context__.vals_i("prior_type_d")[(1 - 1)];
      current_statement__ = 74;
      context__.validate_dims("data initialization", "prior_type_r", "int",
        std::vector<size_t>{});
      prior_type_r = std::numeric_limits<int>::min();
      current_statement__ = 74;
      prior_type_r = context__.vals_i("prior_type_r")[(1 - 1)];
      current_statement__ = 75;
      stan::math::validate_non_negative_index("delta", "is_d", is_d);
      current_statement__ = 76;
      stan::math::validate_non_negative_index("rho", "is_r", is_r);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    num_params_r__ = 1 + 1 + is_d + is_r;
  }
  inline std::string model_name() const final {
    return "model_lognormal";
  }
  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.32.2",
             "stancflags = --allow-undefined"};
  }
  template <bool propto__, bool jacobian__, typename VecR, typename VecI,
            stan::require_vector_like_t<VecR>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline stan::scalar_type_t<VecR>
  log_prob_impl(VecR& params_r__, VecI& params_i__, std::ostream*
                pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    static constexpr const char* function__ =
      "model_lognormal_namespace::log_prob";
    // suppress unused var warning
    (void) function__;
    try {
      local_scalar_t__ mu = DUMMY_VAR__;
      current_statement__ = 1;
      mu = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(0,
             lp__);
      local_scalar_t__ sigma2 = DUMMY_VAR__;
      current_statement__ = 2;
      sigma2 = in__.template read_constrain_lb<local_scalar_t__,
                 jacobian__>(0, lp__);
      std::vector<local_scalar_t__> delta =
        std::vector<local_scalar_t__>(is_d, DUMMY_VAR__);
      current_statement__ = 3;
      delta = in__.template read_constrain_lub<std::vector<local_scalar_t__>,
                jacobian__>(coefs_lb(bounds_type_d, bounds_d, pstream__),
                coefs_ub(bounds_type_d, bounds_d, pstream__), lp__, is_d);
      std::vector<local_scalar_t__> rho =
        std::vector<local_scalar_t__>(is_r, DUMMY_VAR__);
      current_statement__ = 4;
      rho = in__.template read_constrain_lub<std::vector<local_scalar_t__>,
              jacobian__>(coefs_lb(bounds_type_r, bounds_r, pstream__),
              coefs_ub(bounds_type_r, bounds_r, pstream__), lp__, is_r);
      local_scalar_t__ pooled_sigma = DUMMY_VAR__;
      Eigen::Matrix<local_scalar_t__,-1,1> mu_i =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(2, DUMMY_VAR__);
      Eigen::Matrix<local_scalar_t__,-1,1> sigma_i =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(2, DUMMY_VAR__);
      Eigen::Matrix<local_scalar_t__,-1,1> mu_log_i =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(2, DUMMY_VAR__);
      Eigen::Matrix<local_scalar_t__,-1,1> sigma_log_i =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(2, DUMMY_VAR__);
      current_statement__ = 18;
      if (stan::math::logical_eq(is_r, 1)) {
        current_statement__ = 14;
        stan::model::assign(sigma_i,
          stan::math::sqrt((1 / (((2 * 1) / sigma2) *
            stan::model::rvalue(rho, "rho", stan::model::index_uni(1))))),
          "assigning variable sigma_i", stan::model::index_uni(1));
        current_statement__ = 15;
        stan::model::assign(sigma_i,
          stan::math::sqrt((1 / (((2 * 1) / sigma2) * (1 -
            stan::model::rvalue(rho, "rho", stan::model::index_uni(1)))))),
          "assigning variable sigma_i", stan::model::index_uni(2));
        current_statement__ = 16;
        pooled_sigma = pool_sigma(
                         stan::model::rvalue(sigma_i, "sigma_i",
                           stan::model::index_uni(1)),
                         stan::model::rvalue(sigma_i, "sigma_i",
                           stan::model::index_uni(2)),
                         static_cast<double>(N1), static_cast<double>(N2),
                         pstream__);
      } else {
        current_statement__ = 10;
        stan::model::assign(sigma_i,
          stan::math::sqrt((1 / (((2 * 1) / sigma2) *
            stan::model::rvalue(fixed_r, "fixed_r", stan::model::index_uni(1))))),
          "assigning variable sigma_i", stan::model::index_uni(1));
        current_statement__ = 11;
        stan::model::assign(sigma_i,
          stan::math::sqrt((1 / (((2 * 1) / sigma2) * (1 -
            stan::model::rvalue(fixed_r, "fixed_r", stan::model::index_uni(1)))))),
          "assigning variable sigma_i", stan::model::index_uni(2));
        current_statement__ = 12;
        pooled_sigma = pool_sigma(
                         stan::model::rvalue(sigma_i, "sigma_i",
                           stan::model::index_uni(1)),
                         stan::model::rvalue(sigma_i, "sigma_i",
                           stan::model::index_uni(2)),
                         static_cast<double>(N1), static_cast<double>(N2),
                         pstream__);
      }
      current_statement__ = 25;
      if (stan::math::logical_eq(is_d, 1)) {
        current_statement__ = 22;
        stan::model::assign(mu_i, (mu - ((0.5 *
          stan::model::rvalue(delta, "delta", stan::model::index_uni(1))) *
          pooled_sigma)), "assigning variable mu_i",
          stan::model::index_uni(1));
        current_statement__ = 23;
        stan::model::assign(mu_i, (mu + ((0.5 *
          stan::model::rvalue(delta, "delta", stan::model::index_uni(1))) *
          pooled_sigma)), "assigning variable mu_i",
          stan::model::index_uni(2));
      } else {
        current_statement__ = 19;
        stan::model::assign(mu_i, (mu - ((0.5 *
          stan::model::rvalue(fixed_d, "fixed_d", stan::model::index_uni(1)))
          * pooled_sigma)), "assigning variable mu_i",
          stan::model::index_uni(1));
        current_statement__ = 20;
        stan::model::assign(mu_i, (mu + ((0.5 *
          stan::model::rvalue(fixed_d, "fixed_d", stan::model::index_uni(1)))
          * pooled_sigma)), "assigning variable mu_i",
          stan::model::index_uni(2));
      }
      current_statement__ = 29;
      for (int i = 1; i <= 2; ++i) {
        current_statement__ = 26;
        stan::model::assign(mu_log_i,
          (stan::math::log(
             stan::model::rvalue(mu_i, "mu_i", stan::model::index_uni(i))) -
          (stan::math::log(
             (-(-stan::math::pow(
                   stan::model::rvalue(mu_i, "mu_i",
                     stan::model::index_uni(i)), 2) -
             stan::math::pow(
               stan::model::rvalue(sigma_i, "sigma_i",
                 stan::model::index_uni(i)), 2)) /
             stan::math::pow(
               stan::model::rvalue(mu_i, "mu_i", stan::model::index_uni(i)),
               2))) / 2)), "assigning variable mu_log_i",
          stan::model::index_uni(i));
        current_statement__ = 27;
        stan::model::assign(sigma_log_i,
          stan::math::sqrt(
            stan::math::log(
              (-(-stan::math::pow(
                    stan::model::rvalue(mu_i, "mu_i",
                      stan::model::index_uni(i)), 2) -
              stan::math::pow(
                stan::model::rvalue(sigma_i, "sigma_i",
                  stan::model::index_uni(i)), 2)) /
              stan::math::pow(
                stan::model::rvalue(mu_i, "mu_i", stan::model::index_uni(i)),
                2)))), "assigning variable sigma_log_i",
          stan::model::index_uni(i));
      }
      {
        current_statement__ = 30;
        lp_accum__.add(Jeffreys_mu_lpdf<false>(mu, pstream__));
        current_statement__ = 31;
        lp_accum__.add(Jeffreys_sigma_lpdf<false>(sigma2, pstream__));
        current_statement__ = 34;
        if (stan::math::logical_eq(is_d, 1)) {
          current_statement__ = 32;
          lp_accum__.add(set_prior(
                           stan::model::rvalue(delta, "delta",
                             stan::model::index_uni(1)), prior_type_d,
                           prior_parameters_d, bounds_type_d, bounds_d,
                           pstream__));
        }
        current_statement__ = 37;
        if (stan::math::logical_eq(is_r, 1)) {
          current_statement__ = 35;
          lp_accum__.add(set_prior(
                           stan::model::rvalue(rho, "rho",
                             stan::model::index_uni(1)), prior_type_r,
                           prior_parameters_r, bounds_type_r, bounds_r,
                           pstream__));
        }
        current_statement__ = 43;
        if (stan::math::logical_eq(is_ss, 0)) {
          current_statement__ = 40;
          lp_accum__.add(stan::math::lognormal_lpdf<false>(x1,
                           stan::model::rvalue(mu_log_i, "mu_log_i",
                             stan::model::index_uni(1)),
                           stan::model::rvalue(sigma_log_i, "sigma_log_i",
                             stan::model::index_uni(1))));
          current_statement__ = 41;
          lp_accum__.add(stan::math::lognormal_lpdf<false>(x2,
                           stan::model::rvalue(mu_log_i, "mu_log_i",
                             stan::model::index_uni(2)),
                           stan::model::rvalue(sigma_log_i, "sigma_log_i",
                             stan::model::index_uni(2))));
        } else {
          current_statement__ = 38;
          std::stringstream errmsg_stream__;
          stan::math::stan_print(&errmsg_stream__,
            "Fitting models with t likelihood and summary statistics is not possible :(.");
          throw std::domain_error(errmsg_stream__.str());
        }
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
  }
  template <typename RNG, typename VecR, typename VecI, typename VecVar,
            stan::require_vector_like_vt<std::is_floating_point,
            VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral,
            VecI>* = nullptr, stan::require_vector_vt<std::is_floating_point,
            VecVar>* = nullptr>
  inline void
  write_array_impl(RNG& base_rng__, VecR& params_r__, VecI& params_i__,
                   VecVar& vars__, const bool
                   emit_transformed_parameters__ = true, const bool
                   emit_generated_quantities__ = true, std::ostream*
                   pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    static constexpr bool propto__ = true;
    // suppress unused var warning
    (void) propto__;
    double lp__ = 0.0;
    // suppress unused var warning
    (void) lp__;
    int current_statement__ = 0;
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    constexpr bool jacobian__ = false;
    static constexpr const char* function__ =
      "model_lognormal_namespace::write_array";
    // suppress unused var warning
    (void) function__;
    try {
      double mu = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 1;
      mu = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(0,
             lp__);
      double sigma2 = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 2;
      sigma2 = in__.template read_constrain_lb<local_scalar_t__,
                 jacobian__>(0, lp__);
      std::vector<double> delta =
        std::vector<double>(is_d, std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 3;
      delta = in__.template read_constrain_lub<std::vector<local_scalar_t__>,
                jacobian__>(coefs_lb(bounds_type_d, bounds_d, pstream__),
                coefs_ub(bounds_type_d, bounds_d, pstream__), lp__, is_d);
      std::vector<double> rho =
        std::vector<double>(is_r, std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 4;
      rho = in__.template read_constrain_lub<std::vector<local_scalar_t__>,
              jacobian__>(coefs_lb(bounds_type_r, bounds_r, pstream__),
              coefs_ub(bounds_type_r, bounds_r, pstream__), lp__, is_r);
      double pooled_sigma = std::numeric_limits<double>::quiet_NaN();
      Eigen::Matrix<double,-1,1> mu_i =
        Eigen::Matrix<double,-1,1>::Constant(2,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,1> sigma_i =
        Eigen::Matrix<double,-1,1>::Constant(2,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,1> mu_log_i =
        Eigen::Matrix<double,-1,1>::Constant(2,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,1> sigma_log_i =
        Eigen::Matrix<double,-1,1>::Constant(2,
          std::numeric_limits<double>::quiet_NaN());
      out__.write(mu);
      out__.write(sigma2);
      out__.write(delta);
      out__.write(rho);
      if (stan::math::logical_negation(
            (stan::math::primitive_value(emit_transformed_parameters__) ||
            stan::math::primitive_value(emit_generated_quantities__)))) {
        return ;
      }
      current_statement__ = 18;
      if (stan::math::logical_eq(is_r, 1)) {
        current_statement__ = 14;
        stan::model::assign(sigma_i,
          stan::math::sqrt((1 / (((2 * 1) / sigma2) *
            stan::model::rvalue(rho, "rho", stan::model::index_uni(1))))),
          "assigning variable sigma_i", stan::model::index_uni(1));
        current_statement__ = 15;
        stan::model::assign(sigma_i,
          stan::math::sqrt((1 / (((2 * 1) / sigma2) * (1 -
            stan::model::rvalue(rho, "rho", stan::model::index_uni(1)))))),
          "assigning variable sigma_i", stan::model::index_uni(2));
        current_statement__ = 16;
        pooled_sigma = pool_sigma(
                         stan::model::rvalue(sigma_i, "sigma_i",
                           stan::model::index_uni(1)),
                         stan::model::rvalue(sigma_i, "sigma_i",
                           stan::model::index_uni(2)),
                         static_cast<double>(N1), static_cast<double>(N2),
                         pstream__);
      } else {
        current_statement__ = 10;
        stan::model::assign(sigma_i,
          stan::math::sqrt((1 / (((2 * 1) / sigma2) *
            stan::model::rvalue(fixed_r, "fixed_r", stan::model::index_uni(1))))),
          "assigning variable sigma_i", stan::model::index_uni(1));
        current_statement__ = 11;
        stan::model::assign(sigma_i,
          stan::math::sqrt((1 / (((2 * 1) / sigma2) * (1 -
            stan::model::rvalue(fixed_r, "fixed_r", stan::model::index_uni(1)))))),
          "assigning variable sigma_i", stan::model::index_uni(2));
        current_statement__ = 12;
        pooled_sigma = pool_sigma(
                         stan::model::rvalue(sigma_i, "sigma_i",
                           stan::model::index_uni(1)),
                         stan::model::rvalue(sigma_i, "sigma_i",
                           stan::model::index_uni(2)),
                         static_cast<double>(N1), static_cast<double>(N2),
                         pstream__);
      }
      current_statement__ = 25;
      if (stan::math::logical_eq(is_d, 1)) {
        current_statement__ = 22;
        stan::model::assign(mu_i, (mu - ((0.5 *
          stan::model::rvalue(delta, "delta", stan::model::index_uni(1))) *
          pooled_sigma)), "assigning variable mu_i",
          stan::model::index_uni(1));
        current_statement__ = 23;
        stan::model::assign(mu_i, (mu + ((0.5 *
          stan::model::rvalue(delta, "delta", stan::model::index_uni(1))) *
          pooled_sigma)), "assigning variable mu_i",
          stan::model::index_uni(2));
      } else {
        current_statement__ = 19;
        stan::model::assign(mu_i, (mu - ((0.5 *
          stan::model::rvalue(fixed_d, "fixed_d", stan::model::index_uni(1)))
          * pooled_sigma)), "assigning variable mu_i",
          stan::model::index_uni(1));
        current_statement__ = 20;
        stan::model::assign(mu_i, (mu + ((0.5 *
          stan::model::rvalue(fixed_d, "fixed_d", stan::model::index_uni(1)))
          * pooled_sigma)), "assigning variable mu_i",
          stan::model::index_uni(2));
      }
      current_statement__ = 29;
      for (int i = 1; i <= 2; ++i) {
        current_statement__ = 26;
        stan::model::assign(mu_log_i,
          (stan::math::log(
             stan::model::rvalue(mu_i, "mu_i", stan::model::index_uni(i))) -
          (stan::math::log(
             (-(-stan::math::pow(
                   stan::model::rvalue(mu_i, "mu_i",
                     stan::model::index_uni(i)), 2) -
             stan::math::pow(
               stan::model::rvalue(sigma_i, "sigma_i",
                 stan::model::index_uni(i)), 2)) /
             stan::math::pow(
               stan::model::rvalue(mu_i, "mu_i", stan::model::index_uni(i)),
               2))) / 2)), "assigning variable mu_log_i",
          stan::model::index_uni(i));
        current_statement__ = 27;
        stan::model::assign(sigma_log_i,
          stan::math::sqrt(
            stan::math::log(
              (-(-stan::math::pow(
                    stan::model::rvalue(mu_i, "mu_i",
                      stan::model::index_uni(i)), 2) -
              stan::math::pow(
                stan::model::rvalue(sigma_i, "sigma_i",
                  stan::model::index_uni(i)), 2)) /
              stan::math::pow(
                stan::model::rvalue(mu_i, "mu_i", stan::model::index_uni(i)),
                2)))), "assigning variable sigma_log_i",
          stan::model::index_uni(i));
      }
      if (emit_transformed_parameters__) {
        out__.write(pooled_sigma);
        out__.write(mu_i);
        out__.write(sigma_i);
        out__.write(mu_log_i);
        out__.write(sigma_log_i);
      }
      if (stan::math::logical_negation(emit_generated_quantities__)) {
        return ;
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, typename VecI,
            stan::require_vector_t<VecVar>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline void
  unconstrain_array_impl(const VecVar& params_r__, const VecI& params_i__,
                         VecVar& vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      local_scalar_t__ mu = DUMMY_VAR__;
      current_statement__ = 1;
      mu = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, mu);
      local_scalar_t__ sigma2 = DUMMY_VAR__;
      current_statement__ = 2;
      sigma2 = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, sigma2);
      std::vector<local_scalar_t__> delta =
        std::vector<local_scalar_t__>(is_d, DUMMY_VAR__);
      current_statement__ = 3;
      stan::model::assign(delta,
        in__.read<std::vector<local_scalar_t__>>(is_d),
        "assigning variable delta");
      out__.write_free_lub(coefs_lb(bounds_type_d, bounds_d, pstream__),
        coefs_ub(bounds_type_d, bounds_d, pstream__), delta);
      std::vector<local_scalar_t__> rho =
        std::vector<local_scalar_t__>(is_r, DUMMY_VAR__);
      current_statement__ = 4;
      stan::model::assign(rho,
        in__.read<std::vector<local_scalar_t__>>(is_r),
        "assigning variable rho");
      out__.write_free_lub(coefs_lb(bounds_type_r, bounds_r, pstream__),
        coefs_ub(bounds_type_r, bounds_r, pstream__), rho);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, stan::require_vector_t<VecVar>* = nullptr>
  inline void
  transform_inits_impl(const stan::io::var_context& context__, VecVar&
                       vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      current_statement__ = 1;
      context__.validate_dims("parameter initialization", "mu", "double",
        std::vector<size_t>{});
      current_statement__ = 2;
      context__.validate_dims("parameter initialization", "sigma2", "double",
        std::vector<size_t>{});
      current_statement__ = 3;
      context__.validate_dims("parameter initialization", "delta", "double",
        std::vector<size_t>{static_cast<size_t>(is_d)});
      current_statement__ = 4;
      context__.validate_dims("parameter initialization", "rho", "double",
        std::vector<size_t>{static_cast<size_t>(is_r)});
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      local_scalar_t__ mu = DUMMY_VAR__;
      current_statement__ = 1;
      mu = context__.vals_r("mu")[(1 - 1)];
      out__.write_free_lb(0, mu);
      local_scalar_t__ sigma2 = DUMMY_VAR__;
      current_statement__ = 2;
      sigma2 = context__.vals_r("sigma2")[(1 - 1)];
      out__.write_free_lb(0, sigma2);
      std::vector<local_scalar_t__> delta =
        std::vector<local_scalar_t__>(is_d, DUMMY_VAR__);
      current_statement__ = 3;
      delta = context__.vals_r("delta");
      out__.write_free_lub(coefs_lb(bounds_type_d, bounds_d, pstream__),
        coefs_ub(bounds_type_d, bounds_d, pstream__), delta);
      std::vector<local_scalar_t__> rho =
        std::vector<local_scalar_t__>(is_r, DUMMY_VAR__);
      current_statement__ = 4;
      rho = context__.vals_r("rho");
      out__.write_free_lub(coefs_lb(bounds_type_r, bounds_r, pstream__),
        coefs_ub(bounds_type_r, bounds_r, pstream__), rho);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  inline void
  get_param_names(std::vector<std::string>& names__, const bool
                  emit_transformed_parameters__ = true, const bool
                  emit_generated_quantities__ = true) const {
    names__ = std::vector<std::string>{"mu", "sigma2", "delta", "rho"};
    if (emit_transformed_parameters__) {
      std::vector<std::string>
        temp{"pooled_sigma", "mu_i", "sigma_i", "mu_log_i", "sigma_log_i"};
      names__.reserve(names__.size() + temp.size());
      names__.insert(names__.end(), temp.begin(), temp.end());
    }
    if (emit_generated_quantities__) {}
  }
  inline void
  get_dims(std::vector<std::vector<size_t>>& dimss__, const bool
           emit_transformed_parameters__ = true, const bool
           emit_generated_quantities__ = true) const {
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{},
                std::vector<size_t>{},
                std::vector<size_t>{static_cast<size_t>(is_d)},
                std::vector<size_t>{static_cast<size_t>(is_r)}};
    if (emit_transformed_parameters__) {
      std::vector<std::vector<size_t>>
        temp{std::vector<size_t>{},
             std::vector<size_t>{static_cast<size_t>(2)},
             std::vector<size_t>{static_cast<size_t>(2)},
             std::vector<size_t>{static_cast<size_t>(2)},
             std::vector<size_t>{static_cast<size_t>(2)}};
      dimss__.reserve(dimss__.size() + temp.size());
      dimss__.insert(dimss__.end(), temp.begin(), temp.end());
    }
    if (emit_generated_quantities__) {}
  }
  inline void
  constrained_param_names(std::vector<std::string>& param_names__, bool
                          emit_transformed_parameters__ = true, bool
                          emit_generated_quantities__ = true) const final {
    param_names__.emplace_back(std::string() + "mu");
    param_names__.emplace_back(std::string() + "sigma2");
    for (int sym1__ = 1; sym1__ <= is_d; ++sym1__) {
      param_names__.emplace_back(std::string() + "delta" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= is_r; ++sym1__) {
      param_names__.emplace_back(std::string() + "rho" + '.' +
        std::to_string(sym1__));
    }
    if (emit_transformed_parameters__) {
      param_names__.emplace_back(std::string() + "pooled_sigma");
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        param_names__.emplace_back(std::string() + "mu_i" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        param_names__.emplace_back(std::string() + "sigma_i" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        param_names__.emplace_back(std::string() + "mu_log_i" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        param_names__.emplace_back(std::string() + "sigma_log_i" + '.' +
          std::to_string(sym1__));
      }
    }
    if (emit_generated_quantities__) {}
  }
  inline void
  unconstrained_param_names(std::vector<std::string>& param_names__, bool
                            emit_transformed_parameters__ = true, bool
                            emit_generated_quantities__ = true) const final {
    param_names__.emplace_back(std::string() + "mu");
    param_names__.emplace_back(std::string() + "sigma2");
    for (int sym1__ = 1; sym1__ <= is_d; ++sym1__) {
      param_names__.emplace_back(std::string() + "delta" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= is_r; ++sym1__) {
      param_names__.emplace_back(std::string() + "rho" + '.' +
        std::to_string(sym1__));
    }
    if (emit_transformed_parameters__) {
      param_names__.emplace_back(std::string() + "pooled_sigma");
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        param_names__.emplace_back(std::string() + "mu_i" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        param_names__.emplace_back(std::string() + "sigma_i" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        param_names__.emplace_back(std::string() + "mu_log_i" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        param_names__.emplace_back(std::string() + "sigma_log_i" + '.' +
          std::to_string(sym1__));
      }
    }
    if (emit_generated_quantities__) {}
  }
  inline std::string get_constrained_sizedtypes() const {
    return std::string("[{\"name\":\"mu\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sigma2\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"delta\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(is_d) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"rho\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(is_r) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"pooled_sigma\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"mu_i\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(2) + "},\"block\":\"transformed_parameters\"},{\"name\":\"sigma_i\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(2) + "},\"block\":\"transformed_parameters\"},{\"name\":\"mu_log_i\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(2) + "},\"block\":\"transformed_parameters\"},{\"name\":\"sigma_log_i\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(2) + "},\"block\":\"transformed_parameters\"}]");
  }
  inline std::string get_unconstrained_sizedtypes() const {
    return std::string("[{\"name\":\"mu\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sigma2\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"delta\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(is_d) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"rho\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(is_r) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"pooled_sigma\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"mu_i\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(2) + "},\"block\":\"transformed_parameters\"},{\"name\":\"sigma_i\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(2) + "},\"block\":\"transformed_parameters\"},{\"name\":\"mu_log_i\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(2) + "},\"block\":\"transformed_parameters\"},{\"name\":\"sigma_log_i\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(2) + "},\"block\":\"transformed_parameters\"}]");
  }
  // Begin method overload boilerplate
  template <typename RNG> inline void
  write_array(RNG& base_rng, Eigen::Matrix<double,-1,1>& params_r,
              Eigen::Matrix<double,-1,1>& vars, const bool
              emit_transformed_parameters = true, const bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = (((1 + 1) + is_d) + is_r);
    const size_t num_transformed = emit_transformed_parameters * (((((1 + 2)
      + 2) + 2) + 2));
    const size_t num_gen_quantities = emit_generated_quantities * (0);
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    std::vector<int> params_i;
    vars = Eigen::Matrix<double,-1,1>::Constant(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <typename RNG> inline void
  write_array(RNG& base_rng, std::vector<double>& params_r, std::vector<int>&
              params_i, std::vector<double>& vars, bool
              emit_transformed_parameters = true, bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = (((1 + 1) + is_d) + is_r);
    const size_t num_transformed = emit_transformed_parameters * (((((1 + 2)
      + 2) + 2) + 2));
    const size_t num_gen_quantities = emit_generated_quantities * (0);
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    vars = std::vector<double>(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(Eigen::Matrix<T_,-1,1>& params_r, std::ostream* pstream = nullptr) const {
    Eigen::Matrix<int,-1,1> params_i;
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(std::vector<T_>& params_r, std::vector<int>& params_i,
           std::ostream* pstream = nullptr) const {
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  inline void
  transform_inits(const stan::io::var_context& context,
                  Eigen::Matrix<double,-1,1>& params_r, std::ostream*
                  pstream = nullptr) const final {
    std::vector<double> params_r_vec(params_r.size());
    std::vector<int> params_i;
    transform_inits(context, params_i, params_r_vec, pstream);
    params_r = Eigen::Map<Eigen::Matrix<double,-1,1>>(params_r_vec.data(),
                 params_r_vec.size());
  }
  inline void
  transform_inits(const stan::io::var_context& context, std::vector<int>&
                  params_i, std::vector<double>& vars, std::ostream*
                  pstream__ = nullptr) const {
    vars.resize(num_params_r__);
    transform_inits_impl(context, vars, pstream__);
  }
  inline void
  unconstrain_array(const std::vector<double>& params_constrained,
                    std::vector<double>& params_unconstrained, std::ostream*
                    pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = std::vector<double>(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
  inline void
  unconstrain_array(const Eigen::Matrix<double,-1,1>& params_constrained,
                    Eigen::Matrix<double,-1,1>& params_unconstrained,
                    std::ostream* pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = Eigen::Matrix<double,-1,1>::Constant(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
};
}
using stan_model = model_lognormal_namespace::model_lognormal;
#ifndef USING_R
// Boilerplate
stan::model::model_base&
new_model(stan::io::var_context& data_context, unsigned int seed,
          std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
stan::math::profile_map& get_stan_profile_data() {
  return model_lognormal_namespace::profiles__;
}
#endif
#endif
